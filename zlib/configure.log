--------------------
./configure
2015年 3月28日 土曜日 16時17分13秒 JST
=== ztest61601.c ===
extern int getchar();
int hello() {return getchar();}
===
cc -c ztest61601.c
... using cc

Checking for obsessive-compulsive compiler options...
=== ztest61601.c ===
int foo() { return 0; }
===
cc -c -O2 -pipe ztest61601.c

Checking for shared library support...
=== ztest61601.c ===
extern int getchar();
int hello() {return getchar();}
===
cc -w -c -O2 -pipe ztest61601.c
cc -shared -O2 -pipe -o ztest61601.so ztest61601.o
Building shared library libz.so.1.2.8 with cc.

=== ztest61601.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
cc -c -O2 -pipe -D_LARGEFILE64_SOURCE=1 ztest61601.c
ztest61601.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest61601.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
cc -O2 -pipe -o ztest61601 ztest61601.c
Checking for fseeko... Yes.

=== ztest61601.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
cc -O2 -pipe -o ztest61601 ztest61601.c
Checking for strerror... Yes.

=== ztest61601.c ===
#include <unistd.h>
int main() { return 0; }
===
cc -c -O2 -pipe ztest61601.c
Checking for unistd.h... Yes.

=== ztest61601.c ===
#include <stdarg.h>
int main() { return 0; }
===
cc -c -O2 -pipe ztest61601.c
Checking for stdarg.h... Yes.

=== ztest61601.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
cc -c -O2 -pipe ztest61601.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest61601.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
cc -O2 -pipe -o ztest61601 ztest61601.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest61601.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
cc -c -O2 -pipe ztest61601.c
Checking for return value of vsnprintf()... Yes.

ALL = static shared
AR = ar
ARFLAGS = rc
CC = cc
CFLAGS = -O2 -pipe
CPP = cc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = cc -shared
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O2 -pipe
SHAREDLIB = libz.so
SHAREDLIBM = libz.so.1
SHAREDLIBV = libz.so.1.2.8
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.8
Z_U4 =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin 13.4.0
--------------------


